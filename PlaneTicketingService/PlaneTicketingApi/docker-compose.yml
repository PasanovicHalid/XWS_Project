version: "3.1"

name: planeTicketing-api

services:
  #Our service.
  server:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: "planeTicketing-server"
    hostname: "planeTicketing-server"
    #Mapping ports
    ports:
      # <port_on_local>:<port_in_machine>
      - ${SERVER_PORT}:${SERVER_PORT}
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=${SERVER_PORT}
      - DB_NAME=${DATABASE_NAME}
      # NoSQL: environment variable holding connection URI for Mongo database
      # protocol://username:password@hostname:port
      - MONGO_DB_URI=mongodb://mongo:27017
      # - MONGO_DB_URI=mongodb://mongo:27017
    # NoSQL: Our service will try to connect to Mongo before it is up
    # in order to avoid that problem, we specify that it depends on mongo service
    # which defines the order of starting the containers
    # Additionaly we specify that mongo service needs to pass a healthcheck
    depends_on:
      mongo:
        condition: service_healthy

  # NoSQL: MongoDB
  mongo:
    image: mongo
    restart: always
    container_name: "planeTicketing-database"
    ports:
      - "28000:27017"
    environment:
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  # NoSQL: MognoExpress
  mongo-express:
    image: mongo-express
    restart: always
    container_name: "planeTicketing-database-monitoring"
    environment:
      # hostname of mongo databse
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_URL=mongodb://mongo:27017/
    depends_on:
      - mongo
    ports:
      - "9100:8081"
    volumes:
      - mongo_express_data:/data/db

volumes:
  mongo_store:
  mongo_express_data:
